// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/gcd.proto

package compute_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GcdRequest struct {
	A                    int64    `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B                    int64    `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GcdRequest) Reset()         { *m = GcdRequest{} }
func (m *GcdRequest) String() string { return proto.CompactTextString(m) }
func (*GcdRequest) ProtoMessage()    {}
func (*GcdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a145a66d402ced48, []int{0}
}

func (m *GcdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcdRequest.Unmarshal(m, b)
}
func (m *GcdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcdRequest.Marshal(b, m, deterministic)
}
func (m *GcdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcdRequest.Merge(m, src)
}
func (m *GcdRequest) XXX_Size() int {
	return xxx_messageInfo_GcdRequest.Size(m)
}
func (m *GcdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GcdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GcdRequest proto.InternalMessageInfo

func (m *GcdRequest) GetA() int64 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *GcdRequest) GetB() int64 {
	if m != nil {
		return m.B
	}
	return 0
}

type GcdResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GcdResponse) Reset()         { *m = GcdResponse{} }
func (m *GcdResponse) String() string { return proto.CompactTextString(m) }
func (*GcdResponse) ProtoMessage()    {}
func (*GcdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a145a66d402ced48, []int{1}
}

func (m *GcdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GcdResponse.Unmarshal(m, b)
}
func (m *GcdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GcdResponse.Marshal(b, m, deterministic)
}
func (m *GcdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcdResponse.Merge(m, src)
}
func (m *GcdResponse) XXX_Size() int {
	return xxx_messageInfo_GcdResponse.Size(m)
}
func (m *GcdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GcdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GcdResponse proto.InternalMessageInfo

func (m *GcdResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*GcdRequest)(nil), "compute_service.GcdRequest")
	proto.RegisterType((*GcdResponse)(nil), "compute_service.GcdResponse")
}

func init() {
	proto.RegisterFile("proto/gcd.proto", fileDescriptor_a145a66d402ced48)
}

var fileDescriptor_a145a66d402ced48 = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4f, 0x4e, 0xd1, 0x03, 0xb3, 0x84, 0xf8, 0x93, 0xf3, 0x73, 0x0b, 0x4a, 0x4b,
	0x52, 0xe3, 0x8b, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x95, 0x34, 0xb8, 0xb8, 0xdc, 0x93, 0x53,
	0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x78, 0xb8, 0x18, 0x13, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x98, 0x83, 0x18, 0x13, 0x41, 0xbc, 0x24, 0x09, 0x26, 0x08, 0x2f, 0x49, 0x49, 0x95, 0x8b,
	0x1b, 0xac, 0xb2, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8c, 0x8b, 0xad, 0x28, 0xb5, 0xb8,
	0x34, 0xa7, 0x04, 0xaa, 0x1e, 0xca, 0x33, 0x8a, 0xe0, 0xe2, 0x73, 0x86, 0xd8, 0x11, 0x0c, 0xb1,
	0x42, 0xc8, 0x8d, 0x8b, 0x1d, 0x2a, 0x22, 0x24, 0xad, 0x87, 0x66, 0xbf, 0x1e, 0xc2, 0x72, 0x29,
	0x19, 0xec, 0x92, 0x10, 0xfb, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0x5e, 0x30, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xa7, 0xb3, 0x75, 0x6d, 0xd5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ComputeServiceClient interface {
	Compute(ctx context.Context, in *GcdRequest, opts ...grpc.CallOption) (*GcdResponse, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) Compute(ctx context.Context, in *GcdRequest, opts ...grpc.CallOption) (*GcdResponse, error) {
	out := new(GcdResponse)
	err := c.cc.Invoke(ctx, "/compute_service.ComputeService/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServiceServer is the server API for ComputeService service.
type ComputeServiceServer interface {
	Compute(context.Context, *GcdRequest) (*GcdResponse, error)
}

// UnimplementedComputeServiceServer can be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (*UnimplementedComputeServiceServer) Compute(ctx context.Context, req *GcdRequest) (*GcdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterComputeServiceServer(s *grpc.Server, srv ComputeServiceServer) {
	s.RegisterService(&_ComputeService_serviceDesc, srv)
}

func _ComputeService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GcdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compute_service.ComputeService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Compute(ctx, req.(*GcdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ComputeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compute_service.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _ComputeService_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gcd.proto",
}
